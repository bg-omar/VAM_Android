{"version":3,"file":"902.de517ada68887d3d.js","mappings":"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","names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","convertColonRule","cssText","regExp","partReplacer","replace","m","parts","split","r","i","length","p","trim","push","join","colonHostPartReplacer","host","part","suffix","colonHostContextPartReplacer","indexOf","injectScopingSelector","scopingSelector","_","before","_colonGroup","colon","after","scopeSelectors","scopeSelectorText","hostSelector","slotSelector","processRules","input","ruleCallback","inputWithEscapedBlocks","inputParts","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","escapedString","blocks","escapeBlocks","nextBlockIndex","content","contentPrefix","startsWith","substring","rule","scopeSelector","map","shallowPart","selectorNeedsScoping","scopeSelector2","makeScopeMatcher","test","applyStrictSelectorScope","className","_scopeSelectorPart","scopedP","applySimpleSelectorScope","lastIndex","replaceBy","selector2","t","safeContent","placeholders","index","keep","pseudo","exp","safeSelector","res","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","restoreSafeSelector","replaceShadowCssHost","hostScopeId","scopeCss","scopeId","slotScopeId","commentsWithHash","match","extractCommentsWithHash","scoped","scopeCssText","slotted","convertColonSlotted","slotClass","selectors","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","slottedSelectors","ref","stripComments","forEach","regex","text","escapeRegExpSpecialCharacters"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"x_google_ignoreList":[0]}